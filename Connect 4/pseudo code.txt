For a 7x6 grid:

    1 2 3 4 5 6 7
[ 1[O,O,O,O,O,O,O]
  2[O,O,O,O,O,O,O]
  3[O,O,O,O,O,O,O]
  4[O,O,O,O,O,O,O]
  5[O,O,O,O,O,O,O]
  6[O,O,O,O,O,O,O] ]

for row in grid:
	i = 0
	equal = 0
	while i < len(row) - 1:
		if equal >= 4:
			return True
		elif row[i] is not None and row[i] == row[i+1]:
			equal += 1
		else:
			equal = 0
		i += 1
return False


^^ This function will also work for columns, granted I write a get_columns method

For diagonals:

    1 2 3 4 5 6 7
[ 1[O,O,O,X,O,O,O]
  2[O,O,X,O,O,O,O]
  3[O,X,O,O,O,O,O]
  4[X,O,O,O,O,O,O]
  5[O,O,O,O,O,O,O]
  6[O,O,O,O,O,O,O] ]



if I move on (3,4)

the \ diagonal containing (3,4) is:
(1,2) -> (2,3) -> (3,4) -> (4,5) -> (5,6) -> (6,7)

the other diagonal / is:

(6,1) -> (5,2) -> (4,3) -> (3,4) -> (2,5) -> (1,6)

(4,1) == (3,2) == (2,3) == (1,4)
(5,1) == (4,2) == (3,3) == (2,4) == (1,5)
(6,1) == (5,2) == (4,3) == (3,4) == (2,5) == (1,6)
(6,2) == (5,3) == (4,4) == (3,5) == (2,6) == (1,7)
(6,3) == (5,4) == (4,5) == (3,6)
(6,4) == (5,5) == (4,6) == (3,7)



	